.\" file autogenerated by fpman
.TH "fp-tvariantmanager" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
tvariantmanager - Record describing the variant manager.
.SH LOCATION
package \fBrtl\fR, unit \fBSystem\fR, file \fBvarianth.inc\fR, line 156
.SH SYNOPSIS
\fBtype\fR tvariantmanager = \fBrecord\fR
  vartoint: \fB\\fBfunction\\fR\fR;                // Called to convert a variant to an integer value
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartoint64: \fB\\fBfunction\\fR\fR;        // Called to convert a variant to an int64 value
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartoword64: \fB\\fBfunction\\fR\fR;       // Called to convert a variant to a word64 value
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartobool: \fB\\fBfunction\\fR\fR;         // Called to convert a variant to a boolean value
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartoreal: \fB\\fBfunction\\fR\fR;         // Called to convert a variant to a value
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartotdatetime: \fB\\fBfunction\\fR\fR;    // Callback to convert a variant to a \fBTDatetime\fR value.
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartocurr: \fB\\fBfunction\\fR\fR;         // Called to convert a variant to a value
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartopstr: \fB\\fBprocedure\\fR\fR;        // Called to convert a variant to a value
  \fBvar\fR s;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartolstr: \fB\\fBprocedure\\fR\fR;        // Called to convert a variant to a value
  \fBvar\fR s: \fBansistring\fR;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartowstr: \fB\\fBprocedure\\fR\fR;        // Called to convert a variant to a value
  \fBvar\fR s: \fBwidestring\fR;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartointf: \fB\\fBprocedure\\fR\fR;        // Called to convert a variant to a value
  \fBvar\fR intf: \fBIInterface\fR;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartodisp: \fB\\fBprocedure\\fR\fR;        // Called to convert a variant to a value
  \fBvar\fR disp: \fBIDispatch\fR;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR vartodynarray: \fB\\fBprocedure\\fR\fR;    // Called to convert a variant to a value
  \fBvar\fR dynarr: \fBpointer\fR;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR typeinfo: \fBpointer\fR;
  \fBconst\fR varfrombool: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBBoolean\fR;
  \fBconst\fR varfromint: \fB\\fBprocedure\\fR\fR;       // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBLongInt\fR;
  \fBconst\fR Range: \fBLongInt\fR;
  \fBconst\fR varfromint64: \fB\\fBprocedure\\fR\fR;     // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBInt64\fR;
  \fBconst\fR varfromword64: \fB\\fBprocedure\\fR\fR;    // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBQWord\fR;
  \fBconst\fR varfromreal: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBextended\fR;
  \fBconst\fR varfromtdatetime: \fB\\fBprocedure\\fR\fR; // Callback to convert a \fBTDateTime\fR value to a variant.
  \fBvar\fR dest: \fBVariant\fR;
  \fBconst\fR source: \fBTDateTime\fR;
  \fBconst\fR varfromcurr: \fB\\fBprocedure\\fR\fR;      // Callback to convert a variant to a currency value.
  \fBvar\fR dest: \fBVariant\fR;
  \fBconst\fR source: \fBCurrency\fR;
  \fBconst\fR varfrompstr: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBShortString\fR;
  \fBconst\fR varfromlstr: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBansistring\fR;
  \fBconst\fR varfromwstr: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBWideString\fR;
  \fBconst\fR varfromintf: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBIInterface\fR;
  \fBconst\fR varfromdisp: \fB\\fBprocedure\\fR\fR;      // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBIDispatch\fR;
  \fBconst\fR varfromdynarray: \fB\\fBprocedure\\fR\fR;  // Called to convert a value to a variant
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBpointer\fR;
  \fBconst\fR typeinfo: \fBpointer\fR;
  \fBconst\fR olevarfrompstr: \fB\\fBprocedure\\fR\fR;   // Called to convert a value to a variant
  \fBvar\fR dest: \fBolevariant\fR;
  \fBconst\fR source: \fBshortstring\fR;
  \fBconst\fR olevarfromlstr: \fB\\fBprocedure\\fR\fR;   // Called to convert a value to a variant
  \fBvar\fR dest: \fBolevariant\fR;
  \fBconst\fR source: \fBansistring\fR;
  \fBconst\fR olevarfromvar: \fB\\fBprocedure\\fR\fR;    // Called to convert a value to a variant
  \fBvar\fR dest: \fBolevariant\fR;
  \fBconst\fR source: \fBvariant\fR;
  \fBconst\fR olevarfromint: \fB\\fBprocedure\\fR\fR;    // Called to convert a value to a variant
  \fBvar\fR dest: \fBolevariant\fR;
  \fBconst\fR source: \fBLongInt\fR;
  \fBconst\fR range: \fBShortInt\fR;
  \fBconst\fR varop: \fB\\fBprocedure\\fR\fR;            // Called to perform a variant operation:
  \fBvar\fR left: \fBvariant\fR;
  \fBconst\fR right: \fBvariant\fR;
  \fBconst\fR opcode: \fBtvarop\fR;
  \fBconst\fR cmpop: \fB\\fBfunction\\fR\fR;             // Called to perform a variant operation:
  \fBconst\fR left: \fBvariant\fR;
  \fBconst\fR right: \fBvariant\fR;
  \fBconst\fR opcode: \fBtvarop\fR;
  \fBconst\fR varneg: \fB\\fBprocedure\\fR\fR;           // Called to perform a variant operation:
  \fBvar\fR v: \fBvariant\fR;
  \fBvar\fR varnot: \fB\\fBprocedure\\fR\fR;             // Called to perform a variant operation:
  \fBvar\fR v: \fBvariant\fR;
  \fBvar\fR varinit: \fB\\fBprocedure\\fR\fR;            // Called to perform a variant operation:
  \fBvar\fR v: \fBvariant\fR;
  \fBvar\fR varclear: \fB\\fBprocedure\\fR\fR;           // Called to perform a variant operation:
  \fBvar\fR v: \fBvariant\fR;
  \fBvar\fR varaddref: \fB\\fBprocedure\\fR\fR;          // Called to perform a variant operation:
  \fBvar\fR v: \fBvariant\fR;
  \fBvar\fR varcopy: \fB\\fBprocedure\\fR\fR;            // Called to perform a variant operation:
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBvariant\fR;
  \fBconst\fR varcast: \fB\\fBprocedure\\fR\fR;          // Called to perform a variant operation:
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBvariant\fR;
  \fBconst\fR vartype: \fBLongInt\fR;
  \fBconst\fR varcastole: \fB\\fBprocedure\\fR\fR;       // Called to perform a variant operation:
  \fBvar\fR dest: \fBvariant\fR;
  \fBconst\fR source: \fBvariant\fR;
  \fBconst\fR vartype: \fBLongInt\fR;
  \fBconst\fR dispinvoke: \fB\\fBprocedure\\fR\fR;       // Called to perform a variant operation:
  \fBconst\fR dest: \fBpvardata\fR;
  \fBconst\fR source: \fBtvardata\fR;
  \fBconst\fR calldesc: \fBpcalldesc\fR;
  \fBconst\fR params: \fBpointer\fR;
  \fBconst\fR vararrayredim: \fB\\fBprocedure\\fR\fR;    // Called to perform a variant operation:
  \fBvar\fR a: \fBvariant\fR;
  \fBvar\fR highbound: \fBSizeInt\fR;
  \fBvar\fR vararrayget: \fB\\fBfunction\\fR\fR;         // Called to perform a variant operation:
  \fBconst\fR a: \fBvariant\fR;
  \fBconst\fR indexcount: \fBSizeInt\fR;
  \fBconst\fR indices: \fBPLongint\fR;
  \fBconst\fR vararrayput: \fB\\fBprocedure\\fR\fR;      // Called to perform a variant operation:
  \fBvar\fR a: \fBvariant\fR;
  \fBconst\fR value: \fBvariant\fR;
  \fBconst\fR indexcount: \fBSizeInt\fR;
  \fBconst\fR indices: \fBPLongint\fR;
  \fBconst\fR writevariant: \fB\\fBfunction\\fR\fR;      // Called to perform a variant operation:
  \fBvar\fR t: \fBtext\fR;
  \fBconst\fR v: \fBvariant\fR;
  \fBconst\fR width: \fBLongInt\fR;
  \fBconst\fR write0Variant: \fB\\fBfunction\\fR\fR;     // Called to perform a variant operation:
  \fBvar\fR t: \fBtext\fR;
  \fBconst\fR v: \fBVariant\fR;
.br
\fBend\fR;
.SH DESCRIPTION
\fBTVariantManager\fR describes the variant manager as expected by the \fBSetVariantManager\fR call.


.SH SEE ALSO
.TP
.B SetVariantManager
Set the current variant manager.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtvariantmanager.html\fR on 2015-04-09, 22:04.

