.\" file autogenerated by fpman
.TH "fp-paramstr" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
ParamStr - Return value of a command-line argument.
.SH LOCATION
package \fBrtl\fR, unit \fBSystem\fR, file \fBsystemh.inc\fR, line 1092
.SH SYNOPSIS
function \fBParamStr\fR(l:LongInt):string;
.SH DESCRIPTION
\fBParamstr\fR returns the \fBL\fR -th command-line argument. \fBL\fR must be between \fB0\fR and \fBParamcount\fR, these values included. The zeroth argument is the path and file name with which the program was started.

The command-line parameters will be truncated to a length of 255, even though the operating system may support bigger command-lines. The \fBObjpas\fR unit (used in \fBobjfpc\fR or \fBdelphi\fR mode) defines versions of \fBParamstr\fR which return the full-length command-line arguments, using ansistrings.

In the interest of portability, the \fBParamStr\fR function tries to behave the same on all operating systems: like the original \fBParamStr\fR function in Turbo Pascal. This means even on Unix, paramstr(0) returns the full path to the program executable. A notable exception is Mac OS X, where the return value depends on how the application was started. It may be that just the name of the application is returned (in case of a command-line launch)

In general, it's a bad idea to rely on the location of the binary. Often, this goes against best OS practices. Configuration data should (or can) not be stored next to the binary, but on designated locations. What locations these are, is very much operating system dependent. Therefore, \fBParamStr(0)\fR should be used with care.

For an example, see \fBParamcount\fR.


.SH ERRORS
None.


.SH SEE ALSO
.TP
.B Paramcount
Return number of command-line parameters passed to the program.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBparamstr.html\fR on 2015-04-09, 22:05.

