.\" file autogenerated by fpman
.TH "fp-tthreadmanager" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TThreadManager - Thread manager record.
.SH LOCATION
package \fBrtl\fR, unit \fBSystem\fR, file \fBthreadh.inc\fR, line 58
.SH SYNOPSIS
\fBtype\fR TThreadManager = \fBrecord\fR
  InitManager: \fB\\fBfunction\\fR\fR;                            // Initialize the thread manager.
  DoneManager: \fB\\fBfunction\\fR\fR;                            // Clean up the thread manager.
  BeginThread: \fBTBeginThreadHandler\fR;                         // Start a new thread.
  EndThread: \fBTEndThreadHandler\fR;                             // End the current thread.
  SuspendThread: \fBTThreadHandler\fR;                            // Suspend a running thread.
  ResumeThread: \fBTThreadHandler\fR;                             // Resumt a suspended thread.
  KillThread: \fBTThreadHandler\fR;                               // Kill a running thread.
  CloseThread: \fBTThreadHandler\fR;                              // Implements \fBCloseThread\fR.
  ThreadSwitch: \fBTThreadSwitchHandler\fR;                       // Cause a threadswitch.
  WaitForThreadTerminate: \fBTWaitForThreadTerminateHandler\fR;   // Wait for a thread to stop.
  ThreadSetPriority: \fBTThreadSetPriorityHandler\fR;             // Set thread priority
  ThreadGetPriority: \fBTThreadGetPriorityHandler\fR;             // Get thread priority.
  GetCurrentThreadId: \fBTGetCurrentThreadIdHandler\fR;           // Get current thread ID
  InitCriticalSection: \fBTCriticalSectionHandler\fR;             // Initialize a critical section.
  DoneCriticalSection: \fBTCriticalSectionHandler\fR;             // Free a critical section
  EnterCriticalSection: \fBTCriticalSectionHandler\fR;            // Enter a critical section
  TryEnterCriticalSection: \fBTCriticalSectionHandlerTryEnter\fR; // Implements \fBTryEnterCriticalsection\fR.
  LeaveCriticalSection: \fBTCriticalSectionHandler\fR;            // leave a critical section.
  InitThreadVar: \fBTInitThreadVarHandler\fR;                     // Initialize a thread variable.
  RelocateThreadVar: \fBTRelocateThreadVarHandler\fR;             // Relocate a thread variable.
  AllocateThreadVars: \fBTAllocateThreadVarsHandler\fR;           // Allocate thread variables.
  ReleaseThreadVars: \fBTReleaseThreadVarsHandler\fR;             // Release thread variables.
  BasicEventCreate: \fBTBasicEventCreateHandler\fR;               // Create a basic event.
  BasicEventDestroy: \fBTBasicEventHandler\fR;                    // Destroy a basic event.
  BasicEventResetEvent: \fBTBasicEventHandler\fR;                 // Reset a basic event.
  BasicEventSetEvent: \fBTBasicEventHandler\fR;                   // Set a basic event
  BasiceventWaitFOr: \fBTBasicEventWaitForHandler\fR;             // Wait for a basic event
  RTLEventCreate: \fBTRTLCreateEventHandler\fR;                   // Create an RTL event
  RTLEventDestroy: \fBTRTLEventHandler\fR;                        // Free an RTL event
  RTLEventSetEvent: \fBTRTLEventHandler\fR;                       // Set an RTL event
  RTLEventResetEvent: \fBTRTLEventHandler\fR;                     // Reset an RTL event
  RTLEventWaitFor: \fBTRTLEventHandler\fR;                        // Wait for an RTL event.
  RTLEventSync: \fBTRTLEventSyncHandler\fR;                       // Synchronize an RTL event.
  RTLEventWaitForTimeout: \fBTRTLEventHandlerTimeout\fR;          // Wait for RTL event, with timeout.
  SemaphoreInit: \fBTSempahoreInitHandler\fR;                     // Initialize (create) a new semaphore
  SemaphoreDestroy: \fBTSemaphoreDestroyHandler\fR;               // Destroy (free) a semaphore created using \fBSemaphoreInit\fR.
  SemaphorePost: \fBTSemaphorePostHandler\fR;                     // Post an event on a semaphore created using \fBSemaphoreInit\fR.
  SemaphoreWait: \fBTSemaphoreWaitHandler\fR;                     // Wait on a semaphore event posted by \fBSemaphorePost\fR.
.br
\fBend\fR;
.SH DESCRIPTION
\fBTThreadManager\fR is a record that contains all callbacks needed for the thread handling routines of the Free Pascal Run-Time Library. The thread manager can be set by the \fBSetThreadManager\fR procedure, and the current thread manager can be retrieved with the \fBGetThreadManager\fR procedure.

The Windows RTL will set the thread manager automatically to a system thread manager, based on the Windows threading routines. Unix operating systems provide a unit \fBcthreads\fR which implements threads based on the C library POSIX thread routines. It is not included by default, because it would make the system unit dependent on the C library.

For more information about thread programming, see the programmer's guide.


.SH SEE ALSO
.TP
.B GetThreadManager
Return the current thread manager
.TP
.B SetThreadManager
Set the thread manager, optionally return the current thread manager.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtthreadmanager.html\fR on 2015-04-09, 22:05.

