.\" file autogenerated by fpman
.TH "fp-tlist" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TList - Class to manage collections of pointers.
.SH LOCATION
package \fBrtl\fR, unit \fBClasses\fR, file \fBclassesh.inc\fR, line 304
.SH SYNOPSIS
\fBtype\fR TList = \fBclass (TObject, IFPObserved)\fR
.br
\fBpublic\fR
  \fBconstructor\fR Create;                    // Class to manage collections of pointers.
  \fBdestructor\fR Destroy; \fBoverride\fR;          // Destroys the list and releases the memory used to store the list elements.
  \fBprocedure\fR FPOAttachObserver;           // Add an observer to the list of observers
  \fBprocedure\fR FPODetachObserver;           // Remove an observer from the list of observers
  \fBprocedure\fR FPONotifyObservers;          // Notify observers of changes in the list
  \fBprocedure\fR AddList;                     // Add all pointers from another list
  \fBfunction\fR Add;                          // Adds a new pointer to the list.
  \fBprocedure\fR Clear; \fBvirtual\fR;              // Clears the pointer list.
  \fBprocedure\fR Delete;                      // Removes a pointer from the list.
  \fBclass procedure\fR Error; \fBvirtual\fR;        // Raises an EListError exception.
  \fBprocedure\fR Exchange;                    // Exchanges two pointers in the list.
  \fBfunction\fR Expand;                       // Increases the capacity of the list if needed.
  \fBfunction\fR Extract;                      // Remove the first occurrence of a pointer from the list.
  \fBfunction\fR First;                        // Returns the first non-nil pointer in the list.
  \fBfunction\fR GetEnumerator;                // Create an \fBIEnumerator\fR instance
  \fBfunction\fR IndexOf;                      // Returns the index of a given pointer.
  \fBprocedure\fR Insert;                      // Inserts a new pointer in the list at a given position.
  \fBfunction\fR Last;                         // Returns the last non-nil pointer in the list.
  \fBprocedure\fR Move;                        // Moves a pointer from one position in the list to another.
  \fBprocedure\fR Assign;                      // Copy the contents of other lists.
  \fBfunction\fR Remove;                       // Removes a value from the list.
  \fBprocedure\fR Pack;                        // Removes \fBNil\fR pointers from the list and frees unused memory.
  \fBprocedure\fR Sort;                        // Sorts the pointers in the list.
  \fBproperty\fR Capacity: \fBInteger\fR; [rw]       // Current capacity (i.e. number of pointers that can be stored) of the list.
  \fBproperty\fR Count: \fBInteger\fR; [rw]          // Current number of pointers in the list.
  \fBproperty\fR Items: \fBPointer\fR; \fBdefault\fR; [rw] // Provides access to the pointers in the list.
  \fBproperty\fR List: \fBPPointerList\fR; [r]       // Memory array where pointers are stored.
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l.
\fBTList\fR, \fBIFPObserved\fR	Class to manage collections of pointers.
\fBTObject\fR	Base class of all classes.
.TE
.SH DESCRIPTION
\fBTList\fR is a class that can be used to manage collections of pointers. It introduces methods and properties to store the pointers, search in the list of pointers, sort them. It manages its memory by itself, no intervention for that is needed. It has an event notification mechanism which allows to notify of list changes. This slows down some of \fBTList\fR mechanisms, and if no notification is used, \fBTFPList\fR may be used instead.

To manage collections of strings, it is better to use a \fBTStrings\fR descendent such as \fBTStringList\fR. To manage general objects, a \fBTCollection\fR class exists, from which a descendent can be made to manage collections of various kinds.


.SH SEE ALSO
.TP
.B TStrings
Class to manage arrays or collections of strings
.TP
.B TCollection
Base class to manage collections of named objects.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtlist.html\fR on 2015-04-21, 19:20.

