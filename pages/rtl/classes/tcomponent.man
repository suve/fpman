.\" file autogenerated by fpman
.TH "fp-tcomponent" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TComponent - Base class for all components that need owner-owned functionality.
.SH LOCATION
package \fBrtl\fR, unit \fBClasses\fR, file \fBclassesh.inc\fR, line 1661
.SH SYNOPSIS
\fBtype\fR TComponent = \fBclass (TPersistent, IUnknown, IInterfaceComponentReference)\fR
.br
\fBpublic\fR
  \fBprocedure\fR WriteState; \fBvirtual\fR;                // Writes the component to a stream.
  \fBconstructor\fR Create; \fBvirtual\fR;                  // Creates a new instance of the component.
  \fBdestructor\fR Destroy; \fBoverride\fR;                 // Destroys the instance of the component.
  \fBprocedure\fR BeforeDestruction; \fBoverride\fR;        // Overrides standard BeforeDestruction.
  \fBprocedure\fR DestroyComponents;                  // Destroy child components.
  \fBprocedure\fR Destroying;                         // Called when the component is being destroyed
  \fBfunction\fR ExecuteAction; \fBdynamic\fR;              // Standard action execution method.
  \fBfunction\fR FindComponent;                       // Finds and returns the named component in the owned components.
  \fBprocedure\fR FreeNotification;                   // Ask the component to notify called when it is being destroyed.
  \fBprocedure\fR RemoveFreeNotification;             // Remove a component from the Free Notification list.
  \fBprocedure\fR FreeOnRelease;                      // Part of the \fBIVCLComObject\fR interface.
  \fBfunction\fR GetEnumerator;                       // Create an \fBIEnumerator\fR instance
  \fBfunction\fR GetNamePath; \fBoverride\fR;               // Returns the name path of this component.
  \fBfunction\fR GetParentComponent; \fBdynamic\fR;         // Returns the parent component.
  \fBfunction\fR HasParent; \fBdynamic\fR;                  // Does the component have a parent ?
  \fBprocedure\fR InsertComponent;                    // Insert the given component in the list of owned components.
  \fBprocedure\fR RemoveComponent;                    // Remove the given component from the list of owned components.
  \fBfunction\fR SafeCallException; \fBoverride\fR;         // Part of the \fBIVCLComObject\fR Interface.
  \fBprocedure\fR SetSubComponent;                    // Sets the \fBcsSubComponent\fR style.
  \fBfunction\fR UpdateAction; \fBdynamic\fR;               // Updates the state of an action.
  \fBproperty\fR ComObject: \fBIUnknown\fR; [r]             // Interface reference implemented by the component
  \fBfunction\fR IsImplementorOf;                     // Checks if the current component is the implementor of the interface
  \fBprocedure\fR ReferenceInterface;                 // Interface implementation of Notification
  \fBproperty\fR Components: \fBTComponent\fR; [r]          // Indexed list (zero-based) of all owned components.
  \fBproperty\fR ComponentCount: \fBInteger\fR; [r]         // Count of owned components
  \fBproperty\fR ComponentIndex: \fBInteger\fR; [rw]        // Index of component in it's owner's list.
  \fBproperty\fR ComponentState: \fBTComponentState\fR; [r] // Current component's state.
  \fBproperty\fR ComponentStyle: \fBTComponentStyle\fR; [r] // Current component's style.
  \fBproperty\fR DesignInfo: \fBLongInt\fR; [rw]            // Information for IDE designer.
  \fBproperty\fR Owner: \fBTComponent\fR; [r]               // Owner of this component.
  \fBproperty\fR VCLComObject: \fBPointer\fR; [rw]          // Not implemented.
.br
\fBpublished\fR
  \fBproperty\fR Name: \fBTComponentName\fR; [rws]          // Name of the component.
  \fBproperty\fR Tag: \fBPtrInt\fR; [rw]                    // Tag value of the component.
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l
l l.
\fBTComponent\fR, \fBIUnknown\fR, \fBIInterfaceComponentReference\fR	Base class for all components that need owner-owned functionality.
\fBTPersistent\fR, \fBIFPObserved\fR	Base class for streaming system and persistent properties.
\fBTObject\fR	Base class of all classes.
.TE
.SH DESCRIPTION
\fBTComponent\fR is the base class for any set of classes that needs owner-owned functionality, and which needs support for property streaming. All classes that should be handled by an IDE (Integrated Development Environment) must descend from \fBTComponent\fR, as it includes all support for streaming all its published properties.

Components can 'own' other components. \fBTComponent\fR introduces methods for enumerating the child components. It also allows to name the owned components with a unique name. Furthermore, functionality for sending notifications when a component is removed from the list or removed from memory alltogether is also introduced in \fBTComponent\fR 

\fBTComponent\fR introduces a form of automatic memory management: When a component is destroyed, all its child components will be destroyed first.


.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtcomponent.html\fR on 2015-04-21, 19:20.

