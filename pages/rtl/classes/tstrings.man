.\" file autogenerated by fpman
.TH "fp-tstrings" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TStrings - Class to manage arrays or collections of strings
.SH LOCATION
package \fBrtl\fR, unit \fBClasses\fR, file \fBclassesh.inc\fR, line 604
.SH SYNOPSIS
\fBtype\fR TStrings = \fBclass (TPersistent)\fR
.br
\fBpublic\fR
  \fBdestructor\fR Destroy; \fBoverride\fR;                          // Frees all strings and objects, and removes the list from memory.
  \fBfunction\fR Add; \fBvirtual\fR;                                 // Add a string to the list
  \fBfunction\fR AddObject; \fBvirtual\fR;                           // Add a string and associated object to the list.
  \fBprocedure\fR Append;                                      // Add a string to the list.
  \fBprocedure\fR AddStrings;                                  // Add contents of another stringlist to this list.
  \fBprocedure\fR AddText; \fBvirtual\fR;                            // Add text to the string list.
  \fBprocedure\fR Assign; \fBoverride\fR;                            // Assign the contents of another stringlist to this one.
  \fBprocedure\fR BeginUpdate;                                 // Mark the beginning of an update batch.
  \fBprocedure\fR Clear; \fBvirtual\fR; \fBabstract\fR;                    // Removes all strings and associated objects from the list.
  \fBprocedure\fR Delete; \fBvirtual\fR; \fBabstract\fR;                   // Delete a string from the list.
  \fBprocedure\fR EndUpdate;                                   // Mark the end of an update batch.
  \fBfunction\fR Equals;                                       // Compares the contents of two stringlists.
  \fBprocedure\fR Exchange; \fBvirtual\fR;                           // Exchanges two strings in the list.
  \fBfunction\fR GetEnumerator;                                // Create an \fBIEnumerator\fR instance
  \fBfunction\fR GetText; \fBvirtual\fR;                             // Returns the contents as a PChar
  \fBfunction\fR IndexOf; \fBvirtual\fR;                             // Find a string in the list and return its position.
  \fBfunction\fR IndexOfName; \fBvirtual\fR;                         // Finds the index of a name in the name-value pairs.
  \fBfunction\fR IndexOfObject; \fBvirtual\fR;                       // Finds an object in the list and returns its index.
  \fBprocedure\fR Insert; \fBvirtual\fR; \fBabstract\fR;                   // Insert a string in the list.
  \fBprocedure\fR InsertObject;                                // Insert a string and associated object in the list.
  \fBprocedure\fR LoadFromFile; \fBvirtual\fR;                       // Load the contents of a file as a series of strings.
  \fBprocedure\fR LoadFromStream; \fBvirtual\fR;                     // Load the contents of a stream as a series of strings.
  \fBprocedure\fR Move; \fBvirtual\fR;                               // Move a string from one place in the list to another.
  \fBprocedure\fR SaveToFile; \fBvirtual\fR;                         // Save the contents of the list to a file.
  \fBprocedure\fR SaveToStream; \fBvirtual\fR;                       // Save the contents of the string to a stream.
  \fBprocedure\fR SetText; \fBvirtual\fR;                            // Set the contents of the list from a PChar.
  \fBprocedure\fR GetNameValue;                                // Return both name and value of a name,value pair based on it's index.
  \fBfunction\fR ExtractName;                                  // Extract the name part of a string
  \fBproperty\fR TextLineBreakStyle: \fBTTextLineBreakStyle\fR; [rw] // Determines which line breaks to use in the Text property
  \fBproperty\fR Delimiter: \fBChar\fR; [rw]                         // Delimiter character used in DelimitedText.
  \fBproperty\fR DelimitedText: \fBstring\fR; [rw]                   // Get or set all strings in the list in a delimited form.
  \fBproperty\fR StrictDelimiter: \fBBoolean\fR; [rw]                // Should only the delimiter character be considered a delimiter
  \fBproperty\fR QuoteChar: \fBChar\fR; [rw]                         // Quote character used in DelimitedText.
  \fBproperty\fR NameValueSeparator: \fBChar\fR; [rw]                // Value of the character used to separate name,value pairs
  \fBproperty\fR ValueFromIndex: \fBstring\fR; [rw]                  // Return the value part of a string based on it's index.
  \fBproperty\fR Capacity: \fBInteger\fR; [rw]                       // Capacity of the list, i.e. number of strings that the list can currently hold before it tries to expand.
  \fBproperty\fR CommaText: \fBstring\fR; [rw]                       // Contents of the list as a comma-separated string.
  \fBproperty\fR Count: \fBInteger\fR; [r]                           // Number of strings in the list.
  \fBproperty\fR Names: \fBstring\fR; [r]                            // Name parts of the name-value pairs in the list.
  \fBproperty\fR Objects: \fBTObject\fR; [rw]                        // Indexed access to the objects associated with the strings in the list.
  \fBproperty\fR Values: \fBstring\fR; [rw]                          // Value parts of the name-value pairs in the list.
  \fBproperty\fR Strings: \fBstring\fR; \fBdefault\fR; [rw]                // Indexed access to the strings in the list.
  \fBproperty\fR Text: \fBstring\fR; [rw]                            // Contents of the list as one big string.
  \fBproperty\fR StringsAdapter: \fBIStringsAdapter\fR; [rw]         // Not implemented in Free Pascal.
.br
\fBend\fR;
.SH DESCRIPTION
\fBTStrings\fR implements an abstract class to manage an array of strings. It introduces methods to set and retrieve strings in the array, searching for a particular string, concatenating the strings and so on. It also allows an arbitrary object to be associated with each string.

It also introduces methods to manage a series of \fBname=value\fR settings, as found in many configuration files.

An instance of \fBTStrings\fR is never created directly, instead a descendent class such as \fBTStringList\fR should be created. This is because \fBTStrings\fR is an abstract class which does not implement all methods; \fBTStrings\fR also doesn't store any strings, this is the functionality introduced in descendents such as \fBTStringList\fR.

\fBTStrings\fR implements the \fBIFPObserved\fR interface: when the stringlist is changed, a \fBooChanged\fR notification is sent to all observers.


.SH SEE ALSO
.TP
.B TStringList
Standard implementation of the TStrings class.
.TP
.B IFPObserved
Interface implemented by an object that can be observed.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtstrings.html\fR on 2015-04-09, 21:58.

