.\" file autogenerated by fpman
.TH "fp-clone" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
Clone - Clone current process (create new thread)
.SH LOCATION
package \fBrtl\fR, unit \fBoldlinux\fR, file \fBoldlinux.pp\fR, line 1352
.SH SYNOPSIS
function \fBClone\fR(func:TCloneFunc; sp:pointer; flags:LongInt; args:pointer):LongInt;
.SH DESCRIPTION
\fBClone\fR creates a child process which is a copy of the parent process, just like \fBFork\fR does. In difference with \fBFork\fR, however, the child process shares some parts of it's execution context with its parent, so it is suitable for the implementation of threads: many instances of a program that share the same memory.

When the child process is created, it starts executing the function \fBFunc\fR, and passes it \fBArgs\fR. The return value of \fBFunc\fR is either the explicit return value of the function, or the exit code of the child process.

The \fBsp\fR pointer points to the memory reserved as stack space for the child process. This address should be the top of the memory block to be used as stack.

The \fBFlags\fR determine the behaviour of the \fBClone\fR call. The low byte of the Flags contains the number of the signal that will be sent to the parent when the child dies. This may be bitwise OR'ed with the following constants:

.TP
.B CLONE_VM
Parent and child share the same memory space, including memory (un)mapped with subsequent \fBmmap\fR calls.
.TP
.B CLONE_FS
Parent and child have the same view of the filesystem; the \fBchroot\fR, \fBchdir\fR and \fBumask\fR calls affect both processes.
.TP
.B CLONE_FILES
the file descriptor table of parent and child is shared.
.TP
.B CLONE_SIGHAND
the parent and child share the same table of signal handlers. The signal masks are different, though.
.TP
.B CLONE_PID
PArent and child have the same process ID.
.TP 0
Clone returns the process ID in the parent process, and -1 if an error occurred.


.SH ERRORS
On error, -1 is returned to the parent, and no child is created.

.TP
.B sys_eagain
Too many processes are running.
.TP
.B sys_enomem
Not enough memory to create child process.

.SH SEE ALSO
.TP
.B Fork
Create child process

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBclone.html\fR on 2015-04-09, 22:03.

