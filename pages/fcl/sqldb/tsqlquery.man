.\" file autogenerated by fpman
.TH "fp-tsqlquery" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TSQLQuery - Class to handle SQL commands (with or without result set)
.SH LOCATION
package \fBfcl\fR, unit \fBsqldb\fR, file \fBsqldb.pp\fR, line 437
.SH SYNOPSIS
\fBtype\fR TSQLQuery = \fBclass (TCustomSQLQuery)\fR
.br
\fBpublic\fR
  \fBproperty\fR SchemaType: \fBTSchemaType\fR;           // Schema type
  \fBproperty\fR StatementType: \fBTStatementType\fR;     // SQL statement type
.br
\fBpublished\fR
  \fBproperty\fR MaxIndexesCount;                   // Maximum allowed number of indexes.
  \fBproperty\fR FieldDefs;                         // Definitions of available fields in the underlying database
  \fBproperty\fR Active;                            // Is the dataset open or closed.
  \fBproperty\fR AutoCalcFields;                    // How often should the value of calculated fields be calculated
  \fBproperty\fR Filter;                            // Filter to apply to the data in memory.
  \fBproperty\fR Filtered;                          // Is the filter active or not.
  \fBproperty\fR AfterCancel;                       // Event triggered after a Cancel operation.
  \fBproperty\fR AfterClose;                        // Event triggered after the dataset is closed
  \fBproperty\fR AfterDelete;                       // Event triggered after a succesful Delete operation.
  \fBproperty\fR AfterEdit;                         // Event triggered after the dataset is put in edit mode.
  \fBproperty\fR AfterInsert;                       // Event triggered after the dataset is put in insert mode.
  \fBproperty\fR AfterOpen;                         // Event triggered after the dataset is opened.
  \fBproperty\fR AfterPost;                         // Event called after changes have been posted to the underlying database
  \fBproperty\fR AfterScroll;                       // Event triggered after the cursor has changed position.
  \fBproperty\fR BeforeCancel;                      // Event triggered before a Cancel operation.
  \fBproperty\fR BeforeClose;                       // Event triggered before the dataset is closed.
  \fBproperty\fR BeforeDelete;                      // Event triggered before a Delete operation.
  \fBproperty\fR BeforeEdit;                        // Event triggered before the dataset is put in edit mode.
  \fBproperty\fR BeforeInsert;                      // Event triggered before the dataset is put in insert mode.
  \fBproperty\fR BeforeOpen;                        // Event triggered before the dataset is opened.
  \fBproperty\fR BeforePost;                        // Event called before changes are posted to the underlying database
  \fBproperty\fR BeforeScroll;                      // Event triggered before the cursor changes position.
  \fBproperty\fR OnCalcFields;                      // Event triggered when values for calculated fields must be computed.
  \fBproperty\fR OnDeleteError;                     // Event triggered when a delete operation fails.
  \fBproperty\fR OnEditError;                       // Event triggered when an edit operation fails.
  \fBproperty\fR OnFilterRecord;                    // Event triggered to filter records.
  \fBproperty\fR OnNewRecord;                       // Event triggered when a new record is created.
  \fBproperty\fR OnPostError;                       // Event triggered when a post operation fails.
  \fBproperty\fR Database;                          // The \fBTSQLConnection\fR instance on which to execute SQL Statements
  \fBproperty\fR Transaction;                       // Transaction in which to execute SQL statements
  \fBproperty\fR ReadOnly;
  \fBproperty\fR SQL: \fBTStringList\fR;                  // The SQL statement to execute
  \fBproperty\fR UpdateSQL: \fBTStringList\fR;            // Statement to be used when updating an existing row in the database
  \fBproperty\fR InsertSQL: \fBTStringList\fR;            // Statement to be used when inserting a new row in the database
  \fBproperty\fR DeleteSQL: \fBTStringList\fR;            // Statement to be used when inserting a new row in the database
  \fBproperty\fR IndexDefs;                         // List of local index Definitions
  \fBproperty\fR Params: \fBTParams\fR;                   // Parameters detected in the SQL statement.
  \fBproperty\fR ParamCheck: \fBBoolean\fR;               // Should the SQL statement be checked for parameters
  \fBproperty\fR ParseSQL: \fBBoolean\fR;                 // Should the SQL statement be parsed or not
  \fBproperty\fR UpdateMode: \fBTUpdateMode\fR;           // How to create update SQL statements.
  \fBproperty\fR UsePrimaryKeyAsKey: \fBBoolean\fR;       // Should primary key fields be marked \fBpfInKey\fR 
  \fBproperty\fR DataSource: \fBTDataSource\fR;           // Source for parameter values for unbound parameters
  \fBproperty\fR ServerFilter: \fBstring\fR;              // Append server-side filter to SQL statement
  \fBproperty\fR ServerFiltered: \fBBoolean\fR;           // Should server-side filter be applied
  \fBproperty\fR ServerIndexDefs: \fBTServerIndexDefs\fR; // List of indexes on the primary table of the query
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l
l l
l l.
\fBTSQLQuery\fR	Class to handle SQL commands (with or without result set)
\fBTCustomSQLQuery\fR	Custom Class to handle SQL commands (with or without result set)
\fBTCustomBufDataset\fR	
\fBTObject\fR	
.TE
.SH DESCRIPTION
\fBTSQLQuery\fR exposes the properties and some methods introduced in \fBTCustomSQLQuery\fR. It encapsulates a single SQL statement: it implements all the necessary \fB#fcl.db.TDataset\fR functionality to be able to handle a result set. It can also be used to execute a single SQL statement that does not return data, using the \fBTCustomSQLQuery.ExecSQL\fR method.

Typically, the \fBTSQLQuery.Database\fR property must be set once, the \fBTSQLQuery.Transaction\fR property as well. Then the \fBTSQLQuery.SQL\fR property can be set. Depending on the kind of SQL statement, the \fBOpen\fR method can be used to retrieve data, or the \fBExecSQL\fR method can be used to execute the SQL statement (this can be used for DDL statements, or update statements).


.SH SEE ALSO
.TP
.B TSQLTransaction
Transaction in which a \fBTSQLQuery\fR is handled
.TP
.B TSQLConnection
An abstract class representing a connection to a SQL Database
.TP
.B TCustomSQLQuery.ExecSQL
Execute a SQL statement that does not return a result set
.TP
.B TSQLQuery.SQL
The SQL statement to execute

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtsqlquery.html\fR on 2015-04-21, 19:36.

