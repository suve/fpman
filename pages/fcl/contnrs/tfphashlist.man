.\" file autogenerated by fpman
.TH "fp-tfphashlist" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TFPHashList - Hash list class for pointer data
.SH LOCATION
package \fBfcl\fR, unit \fBcontnrs\fR, file \fBcontnrs.pp\fR, line 204
.SH SYNOPSIS
\fBtype\fR TFPHashList = \fBclass (TObject)\fR
.br
\fBpublic\fR
  \fBconstructor\fR Create;                    // Create a new instance of the hashlist
  \fBdestructor\fR Destroy; \fBoverride\fR;          // Removes an instance of the hashlist from the heap
  \fBfunction\fR Add;                          // Add a new key/data pair to the list
  \fBprocedure\fR Clear;                       // Clear the list
  \fBfunction\fR NameOfIndex;                  // Returns the key name of an item by index
  \fBfunction\fR HashOfIndex;                  // Return the hash valye of an item by index
  \fBfunction\fR GetNextCollision;             // Get next collision number
  \fBprocedure\fR Delete;                      // Delete an item from the list.
  \fBclass procedure\fR Error;                 // Raise an error
  \fBfunction\fR Expand;                       // Expand the list
  \fBfunction\fR Extract;                      // Extract a pointer from the list
  \fBfunction\fR IndexOf;                      // Return the index of the data pointer
  \fBfunction\fR Find;                         // Find data associated with key
  \fBfunction\fR FindIndexOf;                  // Return index of named item.
  \fBfunction\fR FindWithHash;                 // Find first element with given name and hash value
  \fBfunction\fR Rename;                       // Rename a key
  \fBfunction\fR Remove;                       // Remove first instance of a pointer
  \fBprocedure\fR Pack;                        // Remove nil pointers from the list
  \fBprocedure\fR ShowStatistics;              // Return some statistics for the list.
  \fBprocedure\fR ForEachCall;                 // Call a procedure for each element in the list
  \fBproperty\fR Capacity: \fBInteger\fR; [rw]       // Capacity of the list.
  \fBproperty\fR Count: \fBInteger\fR; [rw]          // Current number of elements in the list.
  \fBproperty\fR Items: \fBPointer\fR; \fBdefault\fR; [rw] // Indexed array with pointers
  \fBproperty\fR List: \fBPHashItemList\fR; [r]      // Low-level hash list
  \fBproperty\fR Strs: \fBPChar\fR; [r]              // Low-level memory area with strings.
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l.
\fBTFPHashList\fR	Hash list class for pointer data
\fBTObject\fR	
.TE
.SH DESCRIPTION
\fBTFPHashList\fR implements a fast hash class. The class is built for speed, therefore the key values can be shortstrings only, and the data can only be pointers.

if a base class for an own hash class is wanted, the \fBTFPCustomHashTable\fR class can be used. If a hash class for objects is needed instead of pointers, the \fBTFPHashObjectList\fR class can be used.


.SH SEE ALSO
.TP
.B TFPCustomHashTable
Hash class
.TP
.B TFPHashObjectList
Hash table for data pointers
.TP
.B TFPStringHashTable
Hash table for string data.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtfphashlist.html\fR on 2015-04-21, 19:32.

