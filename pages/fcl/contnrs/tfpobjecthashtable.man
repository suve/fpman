.\" file autogenerated by fpman
.TH "fp-tfpobjecthashtable" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TFPObjectHashTable - Hash table for object instances
.SH LOCATION
package \fBfcl\fR, unit \fBcontnrs\fR, file \fBcontnrs.pp\fR, line 461
.SH SYNOPSIS
\fBtype\fR TFPObjectHashTable = \fBclass (TFPCustomHashTable)\fR
.br
\fBpublic\fR
  \fBconstructor\fR Create;                    // Create a new instance of \fBTFPObjectHashTable\fR 
  \fBconstructor\fR CreateWith;                // Create a new hash table with given size and hash function
  \fBfunction\fR Iterate; \fBvirtual\fR;             // Iterate over the objects in the hash table
  \fBprocedure\fR Add; \fBvirtual\fR;                // Add a new object to the hash table
  \fBproperty\fR Items: \fBTObject\fR; \fBdefault\fR; [rw] // Key-based access to the objects
  \fBproperty\fR OwnsObjects: \fBBoolean\fR; [rw]    // Does the hash table own the objects ?
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l
l l.
\fBTFPObjectHashTable\fR	Hash table for object instances
\fBTFPCustomHashTable\fR	Hash class
\fBTObject\fR	
.TE
.SH DESCRIPTION
\fBTFPStringHashTable\fR is a \fBTFPCustomHashTable\fR descendent which stores object instances together with the keys. In case the data associated with the keys are strings themselves, it's better to use \fBTFPStringHashTable\fR, or for arbitrary pointer data, \fBTFPDataHashTable\fR is more suitable. The objects are exposed with their keys through the \fBItems\fR property.


.SH SEE ALSO
.TP
.B TFPStringHashTable
Hash table for string data.
.TP
.B TFPDataHashTable
Hash table for data pointers
.TP
.B TFPObjectHashTable.Items
Key-based access to the objects

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtfpobjecthashtable.html\fR on 2015-04-21, 19:32.

