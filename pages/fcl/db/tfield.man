.\" file autogenerated by fpman
.TH "fp-tfield" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TField - Provide access to the contents of a single field in a record
.SH LOCATION
package \fBfcl\fR, unit \fBdb\fR, file \fBdb.pas\fR, line 261
.SH SYNOPSIS
\fBtype\fR TField = \fBclass (TComponent)\fR
.br
\fBpublic\fR
  \fBconstructor\fR Create; \fBoverride\fR;                 // Create a new \fBTField\fR instance
  \fBdestructor\fR Destroy; \fBoverride\fR;                 // Destroy the \fBTField\fR instance
  \fBprocedure\fR Assign; \fBoverride\fR;                   // Copy properties from one TField instance to another
  \fBprocedure\fR AssignValue;                        // Assign value of a variant record to the field.
  \fBprocedure\fR Clear; \fBvirtual\fR;                     // Clear the field contents.
  \fBprocedure\fR FocusControl;                       // Set focus to the first control connected to this field.
  \fBfunction\fR GetData;                             // Get the data from this field
  \fBclass function\fR IsBlob; \fBvirtual\fR;               // Is the field a BLOB field (untyped data of indeterminate size).
  \fBfunction\fR IsValidChar; \fBvirtual\fR;                // Check whether a character is valid input for the field
  \fBprocedure\fR RefreshLookupList;                  // Refresh the lookup list
  \fBprocedure\fR SetData;                            // Save the field data
  \fBprocedure\fR SetFieldType; \fBvirtual\fR;              // Set the field data type
  \fBprocedure\fR Validate;                           // Validate the data buffer
  \fBproperty\fR AsBCD: \fBTBCD\fR; [rw]                    // Access the field's contents as a BCD (Binary coded Decimal)
  \fBproperty\fR AsBoolean: \fBBoolean\fR; [rw]             // Access the field's contents as a Boolean value.
  \fBproperty\fR AsBytes: \fBTBytes\fR; [rw]                // Retrieve the contents of the field as an array of bytes
  \fBproperty\fR AsCurrency: \fBCurrency\fR; [rw]           // Access the field's contents as a Currency value.
  \fBproperty\fR AsDateTime: \fBTDateTime\fR; [rw]          // Access the field's contents as a TDateTime value.
  \fBproperty\fR AsFloat: \fBDouble\fR; [rw]                // Access the field's contents as a floating-point (Double) value.
  \fBproperty\fR AsLongint: \fBLongInt\fR; [rw]             // Access the field's contents as a 32-bit signed integer (longint) value.
  \fBproperty\fR AsLargeInt: \fBLargeInt\fR; [rw]           // Access the field's contents as a 64-bit signed integer (longint) value.
  \fBproperty\fR AsInteger: \fBLongInt\fR; [rw]             // Access the field's contents as a 32-bit signed integer (longint) value.
  \fBproperty\fR AsString: \fBstring\fR; [rw]               // Access the field's contents as an AnsiString value.
  \fBproperty\fR AsWideString: \fBWideString\fR; [rw]       // Access the field's contents as a WideString value.
  \fBproperty\fR AsVariant: \fBvariant\fR; [rw]             // Access the field's contents as a Variant value.
  \fBproperty\fR AttributeSet: \fBstring\fR; [rw]           // Not used: dictionary information
  \fBproperty\fR Calculated: \fBBoolean\fR; [rw]            // Is the field a calculated field ?
  \fBproperty\fR CanModify: \fBBoolean\fR; [r]              // Can the field's contents be modified.
  \fBproperty\fR CurValue: \fBVariant\fR; [r]               // Current value of the field
  \fBproperty\fR DataSet: \fBTDataSet\fR; [rw]              // Dataset this field belongs to
  \fBproperty\fR DataSize: \fBInteger\fR; [r]               // Size of the field's data
  \fBproperty\fR DataType: \fBTFieldType\fR; [r]            // The data type of the field.
  \fBproperty\fR DisplayName: \fBstring\fR; [r]             // User-readable fieldname
  \fBproperty\fR DisplayText: \fBstring\fR; [r]             // Formatted field value
  \fBproperty\fR EditMask: \fBTEditMask\fR; [rw]            // Specify an edit mask for an edit control
  \fBproperty\fR EditMaskPtr: \fBTEditMask\fR; [r]          // Alias for EditMask
  \fBproperty\fR FieldNo: \fBLongInt\fR; [r]                // Number of the field in the record
  \fBproperty\fR IsIndexField: \fBBoolean\fR; [r]           // Is the field an indexed field ?
  \fBproperty\fR IsNull: \fBBoolean\fR; [r]                 // Is the field empty
  \fBproperty\fR Lookup: \fBBoolean\fR; [rw]                // Is the field a lookup field
  \fBproperty\fR NewValue: \fBVariant\fR; [rw]              // The new value of the field
  \fBproperty\fR Offset: \fBWord\fR; [r]                    // Offset of the field's value in the dataset buffer
  \fBproperty\fR Size: \fBInteger\fR; [rw]                  // Logical size of the field
  \fBproperty\fR Text: \fBstring\fR; [rw]                   // Text representation of the field
  \fBproperty\fR ValidChars: \fBTFieldChars\fR; [rw]        // Characters that are valid input for the field's content
  \fBproperty\fR Value: \fBvariant\fR; [rw]                 // Value of the field as a variant value
  \fBproperty\fR OldValue: \fBvariant\fR; [r]               // Old value of the field
  \fBproperty\fR LookupList: \fBTLookupList\fR; [r]         // List of lookup values
.br
\fBpublished\fR
  \fBproperty\fR Alignment: \fBTAlignment\fR; [rw]          // Alignment for this field
  \fBproperty\fR CustomConstraint: \fBstring\fR; [rw]       // Custom constraint for the field's value
  \fBproperty\fR ConstraintErrorMessage: \fBstring\fR; [rw] // Message to display if the \fBCustomConstraint\fR constraint is violated.
  \fBproperty\fR DefaultExpression: \fBstring\fR; [rw]      // Default value for the field
  \fBproperty\fR DisplayLabel: \fBstring\fR; [rws]          // Name of the field for display purposes
  \fBproperty\fR DisplayWidth: \fBLongInt\fR; [rw]          // Width of the field in characters
  \fBproperty\fR FieldKind: \fBTFieldKind\fR; [rw]          // The kind of field.
  \fBproperty\fR FieldName: \fBstring\fR; [rw]              // Name of the field
  \fBproperty\fR HasConstraints: \fBBoolean\fR; [r]         // Does the field have any constraints defined
  \fBproperty\fR Index: \fBLongInt\fR; [rw]                 // Index of the field in the list of fields
  \fBproperty\fR ImportedConstraint: \fBstring\fR; [rw]     // Constraint for the field value on the level of the underlying database
  \fBproperty\fR KeyFields: \fBstring\fR; [rw]              // Key fields to use when looking up a field value.
  \fBproperty\fR LookupCache: \fBBoolean\fR; [rw]           // Should lookup values be cached
  \fBproperty\fR LookupDataSet: \fBTDataSet\fR; [rw]        // Dataset with lookup values
  \fBproperty\fR LookupKeyFields: \fBstring\fR; [rw]        // Names of fields on which to perform a locate
  \fBproperty\fR LookupResultField: \fBstring\fR; [rw]      // Name of field to use as lookup value
  \fBproperty\fR Origin: \fBstring\fR; [rw]                 // Original fieldname of the field.
  \fBproperty\fR ProviderFlags: \fBTProviderFlags\fR; [rw]  // Flags for provider or update support
  \fBproperty\fR ReadOnly: \fBBoolean\fR; [rw]              // Is the field read-only
  \fBproperty\fR Required: \fBBoolean\fR; [rw]              // Does the field require a value
  \fBproperty\fR Visible: \fBBoolean\fR; [rw]               // Should the field be shown in grids
  \fBproperty\fR OnChange: \fBTFieldNotifyEvent\fR; [rw]    // Event triggerd when the field's value has changed
  \fBproperty\fR OnGetText: \fBTFieldGetTextEvent\fR; [rw]  // Event to format the field's content
  \fBproperty\fR OnSetText: \fBTFieldSetTextEvent\fR; [rw]  // Event to set the field's content based on a user-formatted string
  \fBproperty\fR OnValidate: \fBTFieldNotifyEvent\fR; [rw]  // Event to validate the value of a field before it is written to the data buffer
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l
l l
l l.
\fBTField\fR	Provide access to the contents of a single field in a record
\fBTComponent\fR, \fBIUnknown\fR, \fBIInterfaceComponentReference\fR	
\fBTPersistent\fR, \fBIFPObserved\fR	
\fBTObject\fR	
.TE
.SH DESCRIPTION
\fBTField\fR is an abstract class that defines access methods for a field in a record, controlled by a \fBTDataset\fR instance. It provides methods and properties to access the contents of the field in the current record. Reading one of the AsXXX properties of \fBTField\fR will access the field contents and return the contents as the desired type. Writing one of the AsXXX properties will write a value to the buffer represented by the \fBTField\fR instance.

\fBTField\fR is an abstract class, meaning that it should never be created directly. \fBTDataset\fR instances always create one of the descendent classes of TField, depending on the type of the underlying data.


.SH SEE ALSO
.TP
.B TDataset
Base class for records-based data-access
.TP
.B TFieldDef
Class to describe one field in a record in a dataset
.TP
.B TFields
Collection of #fcl.db.TField instances

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtfield.html\fR on 2015-04-21, 19:34.

