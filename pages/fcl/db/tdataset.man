.\" file autogenerated by fpman
.TH "fp-tdataset" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TDataSet - Base class for records-based data-access
.SH LOCATION
package \fBfcl\fR, unit \fBdb\fR, file \fBdb.pas\fR, line 1346
.SH SYNOPSIS
\fBtype\fR TDataSet = \fBclass (TComponent)\fR
.br
\fBpublic\fR
  \fBconstructor\fR Create; \fBoverride\fR;                     // Create a new \fBTDataset\fR instance
  \fBdestructor\fR Destroy; \fBoverride\fR;                     // Free a \fBTDataset\fR instance
  \fBfunction\fR ActiveBuffer;                            // Currently active memory buffer
  \fBfunction\fR GetFieldData;                            // Get the data for a field
  \fBprocedure\fR SetFieldData;                           // Store the data for a field
  \fBprocedure\fR Append;                                 // Append a new record to the data
  \fBprocedure\fR AppendRecord;                           // Append a new record to the dataset and fill with data
  \fBfunction\fR BookmarkValid; \fBvirtual\fR;                  // Test whether \fBABookMark\fR is a valid bookmark.
  \fBprocedure\fR Cancel; \fBvirtual\fR;                        // Cancel the current editing operation
  \fBprocedure\fR CheckBrowseMode;                        // Check whether the dataset is in browse mode.
  \fBprocedure\fR ClearFields;                            // Clear the values of all fields
  \fBprocedure\fR Close;                                  // Close the dataset
  \fBfunction\fR ControlsDisabled;                        // Check whether the controls are disabled
  \fBfunction\fR CompareBookmarks; \fBvirtual\fR;               // Compare two bookmarks
  \fBfunction\fR CreateBlobStream; \fBvirtual\fR;               // Create blob stream
  \fBprocedure\fR CursorPosChanged;                       // Indicate a change in cursor position
  \fBprocedure\fR DataConvert; \fBvirtual\fR;                   // Convert data from/to native format
  \fBprocedure\fR Delete;                                 // Delete the current record.
  \fBprocedure\fR DisableControls;                        // Disable event propagation of controls
  \fBprocedure\fR Edit;                                   // Set the dataset in editing mode.
  \fBprocedure\fR EnableControls;                         // Enable event propagation of controls
  \fBfunction\fR FieldByName;                             // Search a field by name
  \fBfunction\fR FindField;                               // Find a field by name
  \fBfunction\fR FindFirst; \fBvirtual\fR;                      // Find the first active record (deprecated)
  \fBfunction\fR FindLast; \fBvirtual\fR;                       // Find the last active record (deprecated)
  \fBfunction\fR FindNext; \fBvirtual\fR;                       // Find the next active record (deprecated)
  \fBfunction\fR FindPrior; \fBvirtual\fR;                      // Find the previous active record (deprecated)
  \fBprocedure\fR First;                                  // Position the dataset on the first record.
  \fBprocedure\fR FreeBookmark; \fBvirtual\fR;                  // Free a bookmark obtained with \fBGetBookmark\fR (deprecated)
  \fBfunction\fR GetBookmark; \fBvirtual\fR;                    // Get a bookmark pointer (deprecated)
  \fBfunction\fR GetCurrentRecord; \fBvirtual\fR;               // Copy the data for the current record in a memory buffer
  \fBprocedure\fR GetFieldList;                           // Return field instances in a list
  \fBprocedure\fR GetFieldNames;                          // Return a list of all available field names
  \fBprocedure\fR GotoBookmark;                           // Jump to bookmark
  \fBprocedure\fR Insert;                                 // Insert a new record at the current position.
  \fBprocedure\fR InsertRecord;                           // Insert a new record with given values.
  \fBfunction\fR IsEmpty;                                 // Check if the dataset contains no data
  \fBfunction\fR IsLinkedTo;                              // Check whether a datasource is linked to the dataset
  \fBfunction\fR IsSequenced; \fBvirtual\fR;                    // Is the data sequenced
  \fBprocedure\fR Last;                                   // Navigate forward to the last record
  \fBfunction\fR Locate; \fBvirtual\fR;                         // Locate a record based on some key values
  \fBfunction\fR Lookup; \fBvirtual\fR;                         // Search for a record and return matching values.
  \fBfunction\fR MoveBy;                                  // Move the cursor position
  \fBprocedure\fR Next;                                   // Go to the next record in the dataset.
  \fBprocedure\fR Open;                                   // Activate the dataset: Fetch data into memory.
  \fBprocedure\fR Post; \fBvirtual\fR;                          // Post pending edits to the database.
  \fBprocedure\fR Prior;                                  // Go to the previous record
  \fBprocedure\fR Refresh;                                // Refresh the records in the dataset
  \fBprocedure\fR Resync; \fBvirtual\fR;                        // Resynchronize the data buffer
  \fBprocedure\fR SetFields;                              // Set a number of field values at once
  \fBfunction\fR Translate; \fBvirtual\fR;                      // Transliterate a buffer
  \fBprocedure\fR UpdateCursorPos;                        // Update cursor position
  \fBprocedure\fR UpdateRecord;                           // Indicate that the record contents have changed
  \fBfunction\fR UpdateStatus; \fBvirtual\fR;                   // Get the update status for the current record
  \fBproperty\fR BlockReadSize: \fBInteger\fR; [rw]             // Number of records to read
  \fBproperty\fR BOF: \fBBoolean\fR; [r]                        // Is the cursor at the beginning of the data (on the first record)
  \fBproperty\fR Bookmark: \fBTBookmarkStr\fR; [rw]             // Get or set the current cursor position
  \fBproperty\fR CanModify: \fBBoolean\fR; [r]                  // Can the data in the dataset be modified
  \fBproperty\fR DataSource: \fBTDataSource\fR; [r]             // Datasource this dataset is connected to.
  \fBproperty\fR DefaultFields: \fBBoolean\fR; [r]              // Is the dataset using persisten fields or not.
  \fBproperty\fR EOF: \fBBoolean\fR; [r]                        // Indicates whether the last record has been reached.
  \fBproperty\fR FieldCount: \fBLongInt\fR; [r]                 // Number of fields
  \fBproperty\fR FieldDefs: \fBTFieldDefs\fR; [rw]              // Definitions of available fields in the underlying database
  \fBproperty\fR Found: \fBBoolean\fR; [r]                      // Check success of one of the \fBFind\fR methods
  \fBproperty\fR Modified: \fBBoolean\fR; [r]                   // Was the current record modified ?
  \fBproperty\fR IsUniDirectional: \fBBoolean\fR; [r]           // Is the dataset unidirectional (i.e. forward scrolling only)
  \fBproperty\fR RecordCount: \fBLongInt\fR; [r]                // Number of records in the dataset
  \fBproperty\fR RecNo: \fBLongInt\fR; [rw]                     // Current record number
  \fBproperty\fR RecordSize: \fBWord\fR; [r]                    // Size of the record in memory
  \fBproperty\fR State: \fBTDataSetState\fR; [r]                // Current operational state of the dataset
  \fBproperty\fR Fields: \fBTFields\fR; [r]                     // Indexed access to the fields of the dataset.
  \fBproperty\fR FieldValues: \fBVariant\fR; \fBdefault\fR; [rw]      // Acces to field values based on the field names.
  \fBproperty\fR Filter: \fBstring\fR; [rw]                     // Filter to apply to the data in memory.
  \fBproperty\fR Filtered: \fBBoolean\fR; [rw]                  // Is the filter active or not.
  \fBproperty\fR FilterOptions: \fBTFilterOptions\fR; [rw]      // Options to apply when filtering
  \fBproperty\fR Active: \fBBoolean\fR; [rw]                    // Is the dataset open or closed.
  \fBproperty\fR AutoCalcFields: \fBBoolean\fR; [rw]            // How often should the value of calculated fields be calculated
  \fBproperty\fR BeforeOpen: \fBTDataSetNotifyEvent\fR; [rw]    // Event triggered before the dataset is opened.
  \fBproperty\fR AfterOpen: \fBTDataSetNotifyEvent\fR; [rw]     // Event triggered after the dataset is opened.
  \fBproperty\fR BeforeClose: \fBTDataSetNotifyEvent\fR; [rw]   // Event triggered before the dataset is closed.
  \fBproperty\fR AfterClose: \fBTDataSetNotifyEvent\fR; [rw]    // Event triggered after the dataset is closed
  \fBproperty\fR BeforeInsert: \fBTDataSetNotifyEvent\fR; [rw]  // Event triggered before the dataset is put in insert mode.
  \fBproperty\fR AfterInsert: \fBTDataSetNotifyEvent\fR; [rw]   // Event triggered after the dataset is put in insert mode.
  \fBproperty\fR BeforeEdit: \fBTDataSetNotifyEvent\fR; [rw]    // Event triggered before the dataset is put in edit mode.
  \fBproperty\fR AfterEdit: \fBTDataSetNotifyEvent\fR; [rw]     // Event triggered after the dataset is put in edit mode.
  \fBproperty\fR BeforePost: \fBTDataSetNotifyEvent\fR; [rw]    // Event called before changes are posted to the underlying database
  \fBproperty\fR AfterPost: \fBTDataSetNotifyEvent\fR; [rw]     // Event called after changes have been posted to the underlying database
  \fBproperty\fR BeforeCancel: \fBTDataSetNotifyEvent\fR; [rw]  // Event triggered before a Cancel operation.
  \fBproperty\fR AfterCancel: \fBTDataSetNotifyEvent\fR; [rw]   // Event triggered after a Cancel operation.
  \fBproperty\fR BeforeDelete: \fBTDataSetNotifyEvent\fR; [rw]  // Event triggered before a Delete operation.
  \fBproperty\fR AfterDelete: \fBTDataSetNotifyEvent\fR; [rw]   // Event triggered after a succesful Delete operation.
  \fBproperty\fR BeforeScroll: \fBTDataSetNotifyEvent\fR; [rw]  // Event triggered before the cursor changes position.
  \fBproperty\fR AfterScroll: \fBTDataSetNotifyEvent\fR; [rw]   // Event triggered after the cursor has changed position.
  \fBproperty\fR BeforeRefresh: \fBTDataSetNotifyEvent\fR; [rw] // Event triggered before the data is refreshed.
  \fBproperty\fR AfterRefresh: \fBTDataSetNotifyEvent\fR; [rw]  // Event triggered after the data has been refreshed.
  \fBproperty\fR OnCalcFields: \fBTDataSetNotifyEvent\fR; [rw]  // Event triggered when values for calculated fields must be computed.
  \fBproperty\fR OnDeleteError: \fBTDataSetErrorEvent\fR; [rw]  // Event triggered when a delete operation fails.
  \fBproperty\fR OnEditError: \fBTDataSetErrorEvent\fR; [rw]    // Event triggered when an edit operation fails.
  \fBproperty\fR OnFilterRecord: \fBTFilterRecordEvent\fR; [rw] // Event triggered to filter records.
  \fBproperty\fR OnNewRecord: \fBTDataSetNotifyEvent\fR; [rw]   // Event triggered when a new record is created.
  \fBproperty\fR OnPostError: \fBTDataSetErrorEvent\fR; [rw]    // Event triggered when a post operation fails.
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l
l l
l l.
\fBTDataSet\fR	Base class for records-based data-access
\fBTComponent\fR, \fBIUnknown\fR, \fBIInterfaceComponentReference\fR	
\fBTPersistent\fR, \fBIFPObserved\fR	
\fBTObject\fR	
.TE
.SH DESCRIPTION
\fBTDataset\fR is the main class of the \fBdb\fR unit. This abstract class provides all basic funtionality to access data stored in tabular format: The data consists of records, and the data in each record is organised in several fields.

\fBTDataset\fR has a buffer to cache a few records in memory, this buffer is used by \fBTDatasource\fR to create the ability to use data-aware components.

\fBTDataset\fR is an abstract class, which provides the basic functionality to access, navigate through the data and - in case read-write access is available, edit existing or add new records.

\fBTDataset\fR is an abstract class: it does not have the knowledge to store or load the records from whatever medium the records are stored on. Descendants add the functionality to load and save the data. Therefor \fBTDataset\fR is never used directly, one always instantiates a descendent class.

Initially, no data is available: the dataset is inactive. The \fBOpen\fR method must be used to fetch data into memory. After this command, the data is available in memory for browsing or editing purposes: The dataset is active (indicated by the \fBTDataset.Active\fR property). Likewise, the \fBClose\fR method can be used to remove the data from memory. Any changes not yet saved to the underlying medium will be lost.

Data is expected to be in tabular format, where each row represents a record. The dataset has an idea of a cursor: this is the current position of the data cursor in the set of rows. Only the data of the current record is available for display or editing purposes. Through the \fBNext\fR, Prev, \fBFirst\fR and \fBLast\fR methods, it is possible to navigate through the records. The \fBEOF\fR property will be \fBTrue\fR if the last row has been reached. Likewise, the \fBBOF\fR property will return \fBTrue\fR if the first record in the dataset has been rechaed when navigating backwards. If both proprties are empty, then there is no data available. For dataset descendents that support counting the number of records, the \fBRecordCount\fR will be zero.

The \fBAppend\fR and \fBInsert\fR methods can be used to insert new records to the set of records. The \fBTDataset.Delete\fR statement is used to delete the current record, and the \fBEdit\fR command must be used to set the dataset in editing mode: the contents of the current record can then be changed. Any changes made to the current record (be it a new or existing record) must be saved by the \fBPost\fR method, or can be undone using the \fBCancel\fR method.

The data in the various fields properties is available through the \fBFields\fR array property, giving indexed access to all the fields in a record. The contents of a field is always readable. If the dataset is in one of the editing modes, then the fields can also be written to.


.SH SEE ALSO
.TP
.B TField
Provide access to the contents of a single field in a record

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtdataset.html\fR on 2015-04-21, 19:33.

