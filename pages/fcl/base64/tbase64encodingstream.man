.\" file autogenerated by fpman
.TH "fp-tbase64encodingstream" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TBase64EncodingStream - Base64 encoding stream.
.SH LOCATION
package \fBfcl\fR, unit \fBbase64\fR, file \fBbase64.pp\fR, line 33
.SH SYNOPSIS
\fBtype\fR TBase64EncodingStream = \fBclass (TOwnerStream)\fR
.br
\fBpublic\fR
  \fBdestructor\fR Destroy; \fBoverride\fR; // Remove a \fBTBase64EncodingStream\fR instance from memory
  \fBfunction\fR Flush;               // Flush the remaining bytes to the output stream.
  \fBfunction\fR Write; \fBoverride\fR;     // Write data to the stream.
  \fBfunction\fR Seek; \fBoverride\fR;      // Position the stream
.br
\fBend\fR;
.SH DESCRIPTION
\fBTBase64EncodingStream\fR can be used to encode data using the base64 algorithm. At creation time, a destination stream is specified. Any data written to the \fBTBase64EncodingStream\fR instance will be base64 encoded, and subsequently written to the destination stream.

The \fBTBase64EncodingStream\fR stream is a write-only stream. Obviously it is also not seekable. It is meant to be included in a chain of streams.

By the nature of base64 encoding, when a buffer is written to the stream, the output stream does not yet contain all output: input must be a multiple of 3. In order to be sure that the output contains all encoded bytes, the \fBFlush\fR method can be used. The destructor will automatically call \fBFlush\fR, so all data is written to the destination stream when the decodes is destroyed.


.SH SEE ALSO
.TP
.B TBase64DecodingStream
Base64 Decoding stream

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtbase64encodingstream.html\fR on 2015-04-09, 22:08.

