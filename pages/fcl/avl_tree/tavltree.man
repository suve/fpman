.\" file autogenerated by fpman
.TH "fp-tavltree" 3 "2014-03-14" "fpman" "Free Pascal Programmer's Manual"
.SH NAME
TAVLTree - AVL tree component
.SH LOCATION
package \fBfcl\fR, unit \fBAVL_Tree\fR, file \fBavl_tree.pp\fR, line 65
.SH SYNOPSIS
\fBtype\fR TAVLTree = \fBclass\fR
.br
\fBpublic\fR
  Root: \fBTAVLTreeNode\fR;                        // Root node of the tree
  \fBfunction\fR Find;                             // Find a data item in the tree.
  \fBfunction\fR FindKey;                          // Find a data item in the tree using alternate compare mechanism
  \fBfunction\fR FindSuccessor;                    // Find successor to node
  \fBfunction\fR FindPrecessor;
  \fBfunction\fR FindLowest;                       // Find the lowest (leftmost) node in the tree.
  \fBfunction\fR FindHighest;                      // Find the highest (rightmost) node in the tree.
  \fBfunction\fR FindNearest;                      // Find the node closest to the data in the tree
  \fBfunction\fR FindPointer;                      // Search for a data pointer
  \fBfunction\fR FindLeftMost;                     // Find the node most left to a specified data node
  \fBfunction\fR FindRightMost;                    // Find the node most right to a specified node
  \fBfunction\fR FindLeftMostKey;                  // Find the node most left to a specified key node
  \fBfunction\fR FindRightMostKey;                 // Find the node most right to a specified key node
  \fBfunction\fR FindLeftMostSameKey;              // Find the node most left to a specified node with the same data
  \fBfunction\fR FindRightMostSameKey;             // Find the node most right of a specified node with the same data
  \fBprocedure\fR Add;                             // Add a new node to the tree
  \fBprocedure\fR Delete;                          // Delete a node from the tree
  \fBprocedure\fR Remove;                          // Remove a data item from the list.
  \fBprocedure\fR RemovePointer;                   // Remove a pointer item from the list.
  \fBprocedure\fR MoveDataLeftMost;                // Move data to the nearest left element
  \fBprocedure\fR MoveDataRightMost;               // Move data to the nearest right element
  \fBproperty\fR OnCompare: \fBTListSortCompare\fR; [rw] // Compare function used when comparing nodes
  \fBprocedure\fR Clear;                           // Clears the tree
  \fBprocedure\fR FreeAndClear;                    // Clears the tree and frees nodes
  \fBprocedure\fR FreeAndDelete;                   // Delete a node from the tree and destroy it
  \fBproperty\fR Count: \fBInteger\fR; [r]               // Number of nodes in the tree.
  \fBfunction\fR ConsistencyCheck;                 // Check the consistency of the tree
  \fBprocedure\fR WriteReportToStream;             // Write the contents of the tree consistency check to the stream
  \fBfunction\fR ReportAsString;                   // Return the tree report as a string
  \fBprocedure\fR SetNodeManager;                  // Set the node instance manager to use
  \fBconstructor\fR Create;                        // Create a new instance of \fBTAVLTree\fR 
  \fBdestructor\fR Destroy; \fBoverride\fR;              // Destroy the \fBTAVLTree\fR instance
  \fBfunction\fR GetEnumerator;                    // Get an enumerator for the tree.
.br
\fBend\fR;
.SH INHERITANCE
.TS
l l
l l.
\fBTAVLTree\fR	AVL tree component
\fBTObject\fR	
.TE
.SH DESCRIPTION
\fBTAVLTree\fR maintains a balanced AVL tree. The tree consists of \fBTAVLTreeNode\fR nodes, each of which has a \fBData\fR pointer associated with it. The \fBTAVLTree\fR component offers methods to balance and search the tree.

By default, the list is searched with a simple pointer comparison algorithm, but a custom search mechanism can be specified in the \fBOnCompare\fR property.


.SH SEE ALSO
.TP
.B TAVLTreeNode
Represents a node in the tree.

.SH FPMAN
manpage autogenerated by \fIfpman\fR from \fBtavltree.html\fR on 2015-04-21, 19:31.

